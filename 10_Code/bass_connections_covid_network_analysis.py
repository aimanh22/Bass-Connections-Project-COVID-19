# -*- coding: utf-8 -*-
"""Bass_Connections_COVID_Network_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-OHcRLXEkJKBJDjaRXvXPtnyQvJ5ap6T

## Importing Headers
"""

import re
import numpy as np
import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import statsmodels.formula.api as smf
from statsmodels.iolib.summary2 import summary_col

"""#Fetching Pre-COVID data (Census 2011)"""

data=pd.read_csv("./Inter_migrant_network_2011.csv")
data=data.dropna()

#Preprocess and format state names
def convert_string(text):
  #print(text)
  result = re.search('State - (.*) ', text).group(1)
  if result=="NCT OF DELHI":
    return "NCT of Delhi"
  else: 
    return result.title()
data['Destination_state']=data['Destination_state'].apply(convert_string)
values =['Last residence outside India','Countries in Asia beyond India', 'Other Countries', 'Unclassifiable' ]
data = data[data.Origin_state.isin(values)==False]

data

data['Total migrants employment']=data['Total migrants employment'].apply(lambda x: x.replace(',',''))
data['Total migrants employment']=data['Total migrants employment'].apply(float)

data.to_csv(r'.\migarnt_network2011.txt', header=None, index=None, sep=',', mode='a')

data.to_csv('migrant_network_cleaned_2011.csv')

data['Total migrants employment'].sum()

"""#Fetching Post-COVID Data"""

#Fecthing and Preprocessing
post_covid_raw=pd.read_csv("/content/raw_labor_covid_migrant_data.csv")
post_covid_raw['Migrants_returned']=post_covid_raw['Migrants_returned'].apply(lambda x: x.replace(',',''))
post_covid_raw['Migrants_returned']=post_covid_raw['Migrants_returned'].apply(float)
post_covid_raw['State']=post_covid_raw['State'].replace(' ','')
post_covid_raw=post_covid_raw.set_index('State')

post_covid_raw

post_covid_raw['Migrants_returned'].sum()

#Attrition
(12370496.0-9005905.0)/12370496.0

post_covid_train_adjusted=data.copy()
total_migrants=post_covid_train_adjusted.groupby('Origin_state')['Total migrants employment'].sum()
def func(row):
  return row['Total migrants employment']/total_migrants[row['Origin_state']]
post_covid_train_adjusted['pct_composition']=post_covid_train_adjusted.apply(func, axis=1)
post_covid_train_adjusted

post_covid_train_adjusted['pct_composition'].sum()

from numpy.ma.core import floor
def func_pred(row):
  return min(floor(row['pct_composition']*post_covid_raw.loc[row['Origin_state'],'Migrants_returned']),row['Total migrants employment'])
post_covid_train_adjusted['Estimated_Returned_Migrants_labor']=post_covid_train_adjusted.apply(func_pred,axis=1)

post_covid_train_adjusted

post_covid_train_adjusted['Total migrants employment'].sum()

post_covid_train_adjusted['Estimated_Returned_Migrants_labor'].sum()

12553449.0-9005905

post_covid_train_adjusted.to_csv('estimated_labor_census_flows.csv')

post_covid_train_adjusted['Total migrants employment']=data['Total migrants employment']-post_covid_train_adjusted['Estimated_Returned_Migrants_labor']

post_covid_train_adjusted['Total migrants employment'].sum()

pd.concat([post_covid_raw['Migrants_returned'],total_migrants],axis=1)

post_covid_train_adjusted.loc[post_covid_train_adjusted['Total migrants employment']<0,'Total migrants employment'].sum()

post_covid_train_adjusted['Total migrants employment'].sum()

3364350.0/12553449.0 #577 observations and nearly 25% of the migrants can't be traced

post_covid_train_adjusted.loc[post_covid_train_adjusted['Total migrants employment']<0,'Total migrants employment']=0
post_covid_train_adjusted

post_covid_data_migrant=post_covid_train_adjusted.copy()

post_covid_data_migrant['Total migrants employment'].sum()

post_covid_data_migrant['Estimated_Returned_Migrants_labor'].sum()

12369951.0+3547544.0

post_covid_data_migrant=post_covid_data_migrant.drop(post_covid_data_migrant[post_covid_data_migrant['Total migrants employment']==0].index)

len(post_covid_data_migrant)

"""### Calculating the centralities"""

G_pre= nx.from_pandas_edgelist(data, source='Origin_state',target='Destination_state',edge_attr='Total migrants employment',create_using = nx.DiGraph())
G_post= nx.from_pandas_edgelist(post_covid_data_migrant, source='Origin_state',target='Destination_state',edge_attr='Total migrants employment',create_using = nx.DiGraph())

pre_dict=nx.eigenvector_centrality(G_pre,weight='Total migrants employment')
post_dict=nx.eigenvector_centrality(G_post,weight='Total migrants employment')

for state in pre_dict.keys():
  if pre_dict[state]<post_dict[state]:
    print(state,pre_dict[state],post_dict[state])

"""##Preprocessing data for regression"""

df_for_regression=pd.read_excel('excel.xlsx')
df_for_regression['State']=df_for_regression['State'].str.replace('\n',' ')
df_for_regression['State']=df_for_regression['State'].str.replace(' and ',' & ')
df_for_regression

df_for_regression['Number of Active Businesses']=df_for_regression['Number of Active Businesses'].apply(lambda x: str(x))
df_for_regression['Number of Active Businesses']=df_for_regression['Number of Active Businesses'].str.replace(',','')
df_for_regression['Number of Active Businesses']=df_for_regression['Number of Active Businesses'].apply(lambda x: float(x))

df_for_regression.describe()

df_for_regression.loc[df_for_regression['State']=="Delhi",'State']='NCT of Delhi'
df_for_regression.loc[df_for_regression['State']=="Orissa",'State']='Odisha'
df_for_regression.loc[df_for_regression['State']=="Andaman & Nicobar",'State']='Andaman & Nicobar Islands'
df_for_regression.loc[df_for_regression['State']=="Telangana",'State']='Andhra Pradesh'
df_for_regression.loc[df_for_regression['State']=="Chattisgarh",'State']='Chhattisgarh'
df_for_regression.loc[df_for_regression['State']=="Pondicherry",'State']='Puducherry'

def assign_centrality(row):
  if row['Year']<2020:
    return pre_dict[row['State']]
  elif row['Year']==2020 and row['Month'] in ["January","February","March"]:
    return pre_dict[row['State']]
  else:
    return post_dict[row['State']]

df_for_regression['eigenvector_centrality']=df_for_regression.apply(assign_centrality,axis=1)

def assign_covid_effect(row):
  if row['Year']<2020:
    return 0
  elif row['Year']==2020 and row['Month'] in ["January","February","March"]:
    return 0
  else:
    return post_dict[row['State']] - pre_dict[row['State']]
''' if post_dict[row['State']] > pre_dict[row['State']]:
      return 1
    elif pre_dict[row['State']] > post_dict[row['State']]:
      return -1
    else:
      return 0'''
df_for_regression['covid_mig_effect']=df_for_regression.apply(assign_covid_effect,axis=1)

pre_covid_migrant=data.groupby('Destination_state')['Total migrants employment'].sum()
post_covid_migrant=post_covid_data_migrant.groupby('Destination_state')['Total migrants employment'].sum()

def assign_inmigrant(row):
  if row['Year']<2020:
    return pre_covid_migrant[row['State']]
  elif row['Year']==2020 and row['Month'] in ["January","February","March"]:
    return pre_covid_migrant[row['State']]
  else:
    return post_covid_migrant[row['State']]

df_for_regression['inmigrant_pop']=df_for_regression.apply(assign_inmigrant,axis=1)

df_for_regression.to_csv("excel_regression_v2.csv")

df_for_regression

"""Regression"""

df_for_regression=df_for_regression.rename(columns={"Electricty Consumed (in Million Units MU)": "electricity", "Number of Active Businesses": "establishments"})

def get_time_cat(row):
  return row['Month']+' '+ str(int(row['Year']))
df_for_regression['Time']=df_for_regression.apply(get_time_cat,axis=1)
df_for_regression['Year']=df_for_regression['Year'].apply(lambda x: int(x))

df_for_regression #without log

df_for_regression.to_csv("r_table.csv")

df_for_regression.describe()

#i = df_for_regression[df_for_regression.State.isin(['Andaman & Nicobar Islands','Puducherry','Lakshadweep'])].index
#df_for_regression=df_for_regression.drop(i)

#Check
#sum(df_for_regression['inmigrant_pop']<0)

"""#### Regression without log"""

smf.ols("electricity~C(State)+C(Month)+ C(Year)+covid_mig_effect+establishments", data=df_for_regression).fit().summary()

#seasonality of months
from statsmodels.iolib.summary2 import summary_col
reg_0=smf.ols("electricity~C(State)+C(Month)+ Year+covid_mig_effect", data=df_for_regression).fit()
reg_1=smf.ols("electricity~C(State)+C(Month)+ Year+covid_mig_effect+establishments", data=df_for_regression).fit()
reg_2=smf.ols("electricity~C(State)+C(Month)+ Year+covid_mig_effect+inmigrant_pop", data=df_for_regression).fit()
reg_3=smf.ols("electricity~C(State)+C(Month)+ Year+covid_mig_effect+inmigrant_pop+establishments", data=df_for_regression).fit()
summary_col([reg_0,reg_1,reg_2,reg_3],stars=True,float_format='%0.2f')

#seasonality of months
from statsmodels.iolib.summary2 import summary_col
reg_0=smf.ols("electricity~C(State)+C(Month)+ Year+eigenvector_centrality", data=df_for_regression).fit()
reg_1=smf.ols("electricity~C(State)+C(Month)+ Year+eigenvector_centrality+establishments", data=df_for_regression).fit()
reg_2=smf.ols("electricity~C(State)+C(Month)+ Year+eigenvector_centrality+inmigrant_pop", data=df_for_regression).fit()
reg_3=smf.ols("electricity~C(State)+C(Month)+ Year+eigenvector_centrality+inmigrant_pop+establishments", data=df_for_regression).fit()
summary_col([reg_0,reg_1,reg_2,reg_3],stars=True,float_format='%0.2f')

#time
reg_0=smf.ols("electricity~C(State)+C(Time)+eigenvector_centrality", data=df_for_regression).fit()
reg_1=smf.ols("electricity~C(State)+C(Time)+eigenvector_centrality+establishments", data=df_for_regression).fit()
reg_2=smf.ols("electricity~C(State)+C(Time)+eigenvector_centrality+inmigrant_pop", data=df_for_regression).fit()
reg_3=smf.ols("electricity~C(State)+C(Time)+eigenvector_centrality+inmigrant_pop+establishments", data=df_for_regression).fit()
summary_col([reg_0,reg_1,reg_2,reg_3],stars=True,float_format='%0.2f')

"""#With log(electricity)"""

df_for_regression_cleaned=df_for_regression.copy()
df_for_regression_cleaned['electricity']=df_for_regression_cleaned['electricity'].apply(lambda x: np.log(x))

df_for_regression_cleaned

df_for_regression_cleaned['inmigrant_pop']=df_for_regression_cleaned['inmigrant_pop'].apply(lambda x: np.log(x))

#seasonality of months
from statsmodels.iolib.summary2 import summary_col
reg_0=smf.ols("electricity~C(State)+C(Month)+ C(Year)+covid_mig_effect", data=df_for_regression_cleaned).fit()
reg_1=smf.ols("electricity~C(State)+C(Month)+ C(Year)+covid_mig_effect+establishments", data=df_for_regression_cleaned).fit()
reg_2=smf.ols("electricity~C(State)+C(Month)+ C(Year)+covid_mig_effect+inmigrant_pop", data=df_for_regression_cleaned).fit()
reg_3=smf.ols("electricity~C(State)+C(Month)+ C(Year)+covid_mig_effect+inmigrant_pop+establishments", data=df_for_regression_cleaned).fit()
summary_col([reg_0,reg_1,reg_2,reg_3],stars=True,float_format='%0.2f')

#seasonality of months
from statsmodels.iolib.summary2 import summary_col
reg_0=smf.ols("electricity~C(State)+Time+eigenvector_centrality", data=df_for_regression_cleaned).fit()
reg_1=smf.ols("electricity~C(State)+Time+eigenvector_centrality+establishments", data=df_for_regression_cleaned).fit()
reg_2=smf.ols("electricity~C(State)+Time+eigenvector_centrality+inmigrant_pop", data=df_for_regression_cleaned).fit()
reg_3=smf.ols("electricity~C(State)+Time+eigenvector_centrality+inmigrant_pop+establishments", data=df_for_regression_cleaned).fit()
summary_col([reg_0,reg_1,reg_2,reg_3],stars=True,float_format='%0.2f')

reg_2=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+inmigrant_pop", data=df_for_regression_cleaned).fit().summary()

reg_2

"""#Standardized"""

df_for_regression_std=df_for_regression.copy()
#df_for_regression_std['electricity']=(df_for_regression_std['electricity']-df_for_regression_std['electricity'].min())/(df_for_regression_std['electricity'].max()-df_for_regression_std['electricity'].min())
df_for_regression_std['inmigrant_pop']=df_for_regression_std['inmigrant_pop'].apply(lambda x: np.log(x))
                                        #-df_for_regression_std['inmigrant_pop'].min())/(df_for_regression_std['inmigrant_pop'].max()-df_for_regression_std['inmigrant_pop'].min())

df_for_regression

#standardize each month
months=pd.unique(df_for_regression_std['Month'])
years=pd.unique(df_for_regression_std['Year'])
for m in months:
  for y in years:
    df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity']=(df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity']-df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity'].min())/(df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity'].max()-df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity'].min())

df_for_regression_std.describe()

reg_0=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality", data=df_for_regression_std).fit()
reg_1=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+establishments", data=df_for_regression_std).fit()
reg_2=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+inmigrant_pop", data=df_for_regression_std).fit()
reg_3=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+inmigrant_pop+establishments", data=df_for_regression_std).fit()
summary_col([reg_0,reg_1,reg_2,reg_3],stars=True,float_format='%0.2f')

"""#Log Standardized

"""

df_for_regression_std=df_for_regression_cleaned.copy()
#df_for_regression_std['electricity']=(df_for_regression_std['electricity']-df_for_regression_std['electricity'].min())/(df_for_regression_std['electricity'].max()-df_for_regression_std['electricity'].min())
#df_for_regression_std['inmigrant_pop']=(df_for_regression_std['inmigrant_pop']-df_for_regression_std['inmigrant_pop'].min())/(df_for_regression_std['inmigrant_pop'].max()-df_for_regression_std['inmigrant_pop'].min())

#standardize each month
months=pd.unique(df_for_regression_std['Month'])
years=pd.unique(df_for_regression_std['Year'])
for m in months:
  for y in years:
    df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity']=(df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity']-df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity'].min())/(df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity'].max()-df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'electricity'].min())

for m in months:
  for y in years:
    df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'eigenvector_centrality']=(df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'eigenvector_centrality']-df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'eigenvector_centrality'].min())/(df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'eigenvector_centrality'].max()-df_for_regression_std.loc[(df_for_regression_std.Month==m) & (df_for_regression_std.Year==y),'eigenvector_centrality'].min())

df_for_regression_std.describe()

reg_0=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality", data=df_for_regression_std).fit()
reg_1=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+establishments", data=df_for_regression_std).fit()
reg_2=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+inmigrant_pop", data=df_for_regression_std).fit()
reg_3=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+inmigrant_pop+establishments", data=df_for_regression_std).fit()
summary_col([reg_0,reg_1,reg_2,reg_3],stars=True,float_format='%0.2f')

final_reg=smf.ols("eigenvector_centrality~C(State)+C(Month)+ C(Year)+establishments", data=df_for_regression_cleaned).fit()
summary_col([final_reg],stars=True,float_format='%0.2f',
                  model_names=['Model\n(1)'],
                  info_dict={'N':lambda x: "{0:d}".format(int(x.nobs)),
                             'R2':lambda x: "{:.2f}".format(x.rsquared)})

final_reg=smf.ols("electricity~C(State)+C(Month)+ C(Year)+eigenvector_centrality+inmigrant_pop", data=df_for_regression_cleaned).fit()
results = summary_col([final_reg],stars=True,float_format='%0.2f',
                  model_names=['Model\n(1)'],
                  info_dict={'N':lambda x: "{0:d}".format(int(x.nobs)),
                             'R2':lambda x: "{:.2f}".format(x.rsquared)})
print(results)

results.as_latex()

pd.concat(pre_)